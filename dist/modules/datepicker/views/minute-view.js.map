{"version":3,"file":"minute-view.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/views/minute-view.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnE,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAEjE,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD;IAAgD,8CAAoB;IAApE;;IAmBA,CAAC;IAlBU,8CAAS,GAAhB,UAAiB,KAAU;QACvB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAC;IAEM,8CAAS,GAAhB,UAAiB,KAAU;QACvB,MAAM,CAAC,IAAI,CAAC,KAAK;aACZ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;aAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAhE,CAAgE,CAAC,CAAC;IACpF,CAAC;IAEM,kDAAa,GAApB,UAAqB,IAAiB,EAAE,QAAa;QACjD,IAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QACxE,IAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAE1E,IAAI,CAAC,aAAa,GAAM,EAAE,SAAI,EAAI,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IACL,iCAAC;AAAD,CAAC,AAnBD,CAAgD,oBAAoB,GAmBnE;;AA+BD,IAAa,qBAAqB;IAAS,yCAAY;IAanD;eACI,kBAAM,gBAAgB,CAAC,MAAM,EAAE,IAAI,0BAA0B,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5F,CAAC;IAdD,sBAAW,uCAAI;aAAf;YACU,IAAA;;2BAES,EAFR,YAAI,EAAE,YAAI,CAED;YAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAI,IAAI,SAAI,IAAM,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;;;OAAA;IAKL,4BAAC;AAAD,CAAC,AAhBD,CAA2C,YAAY,GAgBtD;AAhBY,qBAAqB;IA7BjC,SAAS,CAAC;QACP,QAAQ,EAAE,0BAA0B;QACpC,QAAQ,EAAE,84BAyBb;KACA,CAAC;;GACW,qBAAqB,CAgBjC;SAhBY,qBAAqB","sourcesContent":["import { Component } from \"@angular/core\";\nimport { Util, DateUtil, DatePrecision } from \"../../../misc/util\";\nimport { CalendarView, CalendarViewType } from \"./calendar-view\";\nimport { CalendarItem } from \"../directives/calendar-item\";\nimport { CalendarMode } from \"../services/calendar.service\";\nimport { CalendarRangeService } from \"../services/calendar-range.service\";\nimport { DateParser } from \"../classes/date-parser\";\n\nexport class CalendarRangeMinuteService extends CalendarRangeService {\n    public calcStart(start:Date):Date {\n        return DateUtil.startOf(DatePrecision.Hour, DateUtil.clone(start), true);\n    }\n\n    public calcDates(start:Date):Date[] {\n        return Util.Array\n            .range(this.length)\n            .map(i => DateUtil.add(DatePrecision.Minute, DateUtil.clone(start), i * 5));\n    }\n\n    public configureItem(item:CalendarItem, baseDate:Date):void {\n        const hs = Util.String.padLeft(item.date.getHours().toString(), 2, \"0\");\n        const ms = Util.String.padLeft(item.date.getMinutes().toString(), 2, \"0\");\n\n        item.humanReadable = `${hs}:${ms}`;\n        item.isOutsideRange = false;\n        item.isToday = false;\n    }\n}\n\n@Component({\n    selector: \"sui-calendar-minute-view\",\n    template: `\n<table class=\"ui celled center aligned unstackable table three column minute\">\n<thead>\n    <tr>\n        <th colspan=\"4\">\n            <span class=\"link\" (click)=\"zoomOut()\">{{ date }}</span>\n            <span class=\"prev link\" [class.disabled]=\"!ranges.canMovePrevious\" (click)=\"ranges.movePrevious()\">\n                <i class=\"chevron left icon\"></i>\n            </span>\n            <span class=\"next link\" [class.disabled]=\"!ranges.canMoveNext\" (click)=\"ranges.moveNext()\">\n                <i class=\"chevron right icon\"></i>\n            </span>\n        </th>\n    </tr>\n</thead>\n<tbody>\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\n        <td class=\"link\"\n            *ngFor=\"let item of group\"\n            [calendarItem]=\"item\"\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\n        </td>\n    </tr>\n</tbody>\n</table>\n`\n})\nexport class SuiCalendarMinuteView extends CalendarView {\n    public get date():string {\n        const [time, date] = new DateParser(\"HH:00|MMMM D, YYYY\", this.service.localeValues)\n            .format(this.currentDate)\n            .split(\"|\");\n\n        if (this.service.config.mode !== CalendarMode.TimeOnly) {\n            return `${date} ${time}`;\n        }\n\n        return time;\n    }\n\n    constructor() {\n        super(CalendarViewType.Minute, new CalendarRangeMinuteService(DatePrecision.Hour, 4, 3));\n    }\n}\n"]}