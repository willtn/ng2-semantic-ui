{"version":3,"file":"multi-select.js","sourceRoot":"","sources":["../../../../src/modules/select/components/multi-select.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC3G,OAAO,EAA4B,OAAO,EAAE,0BAA0B,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACxH,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AA0CvD,IAAa,cAAc;IAAe,kCAAmB;IAqDzD,wBAAY,OAAkB,EAAE,mBAA0C;QAA1E,YACI,kBAAM,OAAO,EAAE,mBAAmB,CAAC,SAMtC;QAJG,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,KAAI,CAAC,qBAAqB,GAAG,IAAI,YAAY,EAAO,CAAC;QAErD,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;;IACpC,CAAC;IApDD,sBAAW,2CAAe;aAA1B;YAAA,iBAQC;YAPG,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC1B,0FAA0F;gBAC1F,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YACD,iDAAiD;YACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO;iBAC5B,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO,CAAC,IAAI,SAAS,EAApD,CAAoD,CAAC,CAAC;QAC3E,CAAC;;;OAAA;IAED,sBAAW,4CAAgB;aAA3B;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;;;OAAA;IAKD,sBAAW,uCAAW;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CAAC;QACpE,CAAC;aAED,UAAuB,WAAkB;YACrC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QACpC,CAAC;;;OAJA;IASD,sBAAW,8CAAkB;aAA7B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC;gBAChC,yDAAyD;gBACzD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC;QAC5D,CAAC;;;OAAA;IAED,sBAAW,8CAAkB;aAA7B;YACI,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,kBAAkB,EAC1C,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;;;OAAA;IAcS,0CAAiB,GAA3B;QAAA,iBAYC;QAXG,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChE,mGAAmG;YACnG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe;iBAEtC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAE,EAAhE,CAAgE,CAAC;iBAC1E,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,SAAS,EAAd,CAAc,CAAC,CAAC;YAEjC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;YACrC,CAAC;QACL,CAAC;IACL,CAAC;IAEM,qCAAY,GAAnB,UAAoB,MAAQ;QAA5B,iBAQC;QAPG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC,CAAC;QAEpF,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEvB,4EAA4E;QAC5E,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAEM,mCAAU,GAAjB,UAAkB,MAAU;QAA5B,iBAwBC;QAvBG,EAAE,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxC,mGAAmG;gBACnG,IAAI,CAAC,eAAe,GAAG,MAAM;qBAExB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAE,EAA/C,CAA+C,CAAC;qBACzD,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,SAAS,EAAd,CAAc,CAAC,CAAC;YACrC,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;oBACtD,qGAAqG;oBACrG,IAAI,CAAC,aAAa;yBACb,aAAa,CAAC,MAAM,CAAC;yBACrB,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,eAAe,GAAG,KAAK,EAA5B,CAA4B,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,+DAA+D;oBAC/D,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;gBAClC,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC9B,CAAC;QACL,CAAC;IACL,CAAC;IAEM,uCAAc,GAArB,UAAsB,MAAQ;QAA9B,iBAOC;QANG,yEAAyE;QACzE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,KAAK,MAAM,EAAb,CAAa,CAAC,CAAC;QACxE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC,CAAC;QAEpF,4EAA4E;QAC5E,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAEM,4CAAmB,GAA1B,UAA2B,KAAmB;QAC1C,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9F,qFAAqF;YACrF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/E,CAAC;IACL,CAAC;IACL,qBAAC;AAAD,CAAC,AA/HD,CAA0C,aAAa,GA+HtD;AAzHG;IADC,MAAM,EAAE;8BACoB,YAAY;6DAAM;AAmB/C;IADC,KAAK,EAAE;;;iDAGP;AAOD;IADC,KAAK,EAAE;;mDACkB;AAiB1B;IADC,WAAW,CAAC,gBAAgB,CAAC;;2DACM;AAnD3B,cAAc;IAxC1B,SAAS,CAAC;QACP,QAAQ,EAAE,kBAAkB;QAC5B,QAAQ,EAAE,uvCA+Bb;QACG,MAAM,EAAE,CAAC,0DAIZ,CAAC;KACD,CAAC;qCAsDsB,UAAU,EAAsB,sBAAsB;GArDjE,cAAc,CA+H1B;SA/HY,cAAc;AAiI3B,8DAA8D;AAS9D,IAAa,2BAA2B;IAAe,+CAA8C;IACjG,qCAAY,IAAyB;eACjC,kBAAM,IAAI,CAAC;IACf,CAAC;IACL,kCAAC;AAAD,CAAC,AAJD,CAAuD,mBAAmB,GAIzE;AAJY,2BAA2B;IARvC,SAAS,CAAC;QACP,QAAQ,EAAE,kBAAkB;QAC5B,IAAI,EAAE;YACF,yBAAyB,EAAE,kBAAkB;YAC7C,WAAW,EAAE,aAAa;SAC7B;QACD,SAAS,EAAE,CAAC,0BAA0B,CAAC,6BAA2B,CAAC,CAAC;KACvE,CAAC;qCAEmB,cAAc;GADtB,2BAA2B,CAIvC;SAJY,2BAA2B","sourcesContent":["import { Component, HostBinding, ElementRef, EventEmitter, Output, Input, Directive } from \"@angular/core\";\nimport { ICustomValueAccessorHost, KeyCode, customValueAccessorFactory, CustomValueAccessor } from \"../../../misc/util\";\nimport { SuiLocalizationService } from \"../../../behaviors/localization\";\nimport { SuiSelectBase } from \"../classes/select-base\";\n\n@Component({\n    selector: \"sui-multi-select\",\n    template: `\n<!-- Dropdown icon -->\n<i class=\"{{ icon }} icon\" (click)=\"onCaretClick($event)\"></i>\n\n<!-- Multi-select labels -->\n<sui-multi-select-label *ngFor=\"let selected of selectedOptions;\"\n                        [value]=\"selected\"\n                        [query]=\"query\"\n                        [formatter]=\"configuredFormatter\"\n                        [template]=\"optionTemplate\"\n                        (deselected)=\"deselectOption($event)\"></sui-multi-select-label>\n<!-- Query input -->\n<input suiSelectSearch\n       type=\"text\"\n       [hidden]=\"!isSearchable || isSearchExternal\">\n\n<!-- Placeholder text -->\n<div class=\"default text\" [class.filtered]=\"!!query && !isSearchExternal\">{{ placeholder }}</div>\n<!-- Select dropdown menu -->\n<div class=\"menu\"\n     suiDropdownMenu\n     [menuTransition]=\"transition\"\n     [menuTransitionDuration]=\"transitionDuration\"\n     [menuAutoSelectFirst]=\"true\">\n\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"availableOptions.length == 0 \">\n        <div *ngIf=\"!maxSelectedReached\" class=\"message\">{{ localeValues.noResultsMessage }}</div>\n        <div *ngIf=\"maxSelectedReached\" class=\"message\">{{ maxSelectedMessage }}</div>\n    </ng-container>\n</div>\n`,\n    styles: [`\n:host input.search {\n    width: 12em !important;\n}\n`]\n})\nexport class SuiMultiSelect<T, U> extends SuiSelectBase<T, U> implements ICustomValueAccessorHost<U[]> {\n    public selectedOptions:T[];\n    // Stores the values written by ngModel before it can be matched to an option from `options`.\n    private _writtenOptions?:U[];\n\n    @Output()\n    public selectedOptionsChange:EventEmitter<U[]>;\n\n    public get filteredOptions():T[] {\n        if (this.maxSelectedReached) {\n            // If we have reached the maximum number of selections, then empty the results completely.\n            return [];\n        }\n        // Returns the search results \\ selected options.\n        return this.searchService.results\n            .filter(r => this.selectedOptions.find(o => r === o) == undefined);\n    }\n\n    public get availableOptions():T[] {\n        return this.filteredOptions;\n    }\n\n    private _placeholder:string;\n\n    @Input()\n    public get placeholder():string {\n        return this._placeholder || this.localeValues.multi.placeholder;\n    }\n\n    public set placeholder(placeholder:string) {\n        this._placeholder = placeholder;\n    }\n\n    @Input()\n    public maxSelected:number;\n\n    public get maxSelectedReached():boolean {\n        if (this.maxSelected == undefined) {\n            // If there is no maximum then we can immediately return.\n            return false;\n        }\n        return this.selectedOptions.length === this.maxSelected;\n    }\n\n    public get maxSelectedMessage():string {\n        return this._localizationService.interpolate(\n            this.localeValues.multi.maxSelectedMessage,\n            [[\"max\", this.maxSelected.toString()]]);\n    }\n\n    @HostBinding(\"class.multiple\")\n    private _multiSelectClasses:boolean;\n\n    constructor(element:ElementRef, localizationService:SuiLocalizationService) {\n        super(element, localizationService);\n\n        this.selectedOptions = [];\n        this.selectedOptionsChange = new EventEmitter<U[]>();\n\n        this._multiSelectClasses = true;\n    }\n\n    protected optionsUpdateHook():void {\n        if (this._writtenOptions && this.searchService.options.length > 0) {\n            // If there were values written by ngModel before the options had been loaded, this runs to fix it.\n            this.selectedOptions = this._writtenOptions\n                // non-null assertion added here because Typescript doesn't recognise the non-null filter.\n                .map(v => this.searchService.options.find(o => v === this.valueGetter(o))!)\n                .filter(v => v != undefined);\n\n            if (this.selectedOptions.length === this._writtenOptions.length) {\n                this._writtenOptions = undefined;\n            }\n        }\n    }\n\n    public selectOption(option:T):void {\n        this.selectedOptions.push(option);\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\n\n        this.resetQuery(false);\n\n        // Automatically refocus the search input for better keyboard accessibility.\n        this.focus();\n    }\n\n    public writeValue(values:U[]):void {\n        if (values instanceof Array) {\n            if (this.searchService.options.length > 0) {\n                // If the options have already been loaded, we can immediately match the ngModel values to options.\n                this.selectedOptions = values\n                    // non-null assertion added here because Typescript doesn't recognise the non-null filter.\n                    .map(v => this.findOption(this.searchService.options, v)!)\n                    .filter(v => v != undefined);\n            }\n            if (values.length > 0 && this.selectedOptions.length === 0) {\n                if (this.valueField && this.searchService.hasItemLookup) {\n                    // If the search service has a selected lookup function, make use of that to load the initial values.\n                    this.searchService\n                        .initialLookup(values)\n                        .then(items => this.selectedOptions = items);\n                } else {\n                    // Otherwise, cache the written value for when options are set.\n                    this._writtenOptions = values;\n                }\n            }\n            if (values.length === 0) {\n                this.selectedOptions = [];\n            }\n        }\n    }\n\n    public deselectOption(option:T):void {\n        // Update selected options to the previously selected options \\ {option}.\n        this.selectedOptions = this.selectedOptions.filter(so => so !== option);\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\n\n        // Automatically refocus the search input for better keyboard accessibility.\n        this.focus();\n    }\n\n    public onQueryInputKeydown(event:KeyboardEvent):void {\n        if (event.keyCode === KeyCode.Backspace && this.query === \"\" && this.selectedOptions.length > 0) {\n            // Deselect the rightmost option when the user presses backspace in the search input.\n            this.deselectOption(this.selectedOptions[this.selectedOptions.length - 1]);\n        }\n    }\n}\n\n// Value accessor directive for the select to support ngModel.\n@Directive({\n    selector: \"sui-multi-select\",\n    host: {\n        \"(selectedOptionsChange)\": \"onChange($event)\",\n        \"(touched)\": \"onTouched()\"\n    },\n    providers: [customValueAccessorFactory(SuiMultiSelectValueAccessor)]\n})\nexport class SuiMultiSelectValueAccessor<T, U> extends CustomValueAccessor<U[], SuiMultiSelect<T, U>> {\n    constructor(host:SuiMultiSelect<T, U>) {\n        super(host);\n    }\n}\n"]}